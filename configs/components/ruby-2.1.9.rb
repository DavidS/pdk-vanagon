component "ruby-2.1.9" do |pkg, settings, platform|
  pkg.version "2.1.9"
  pkg.md5sum "d9d2109d3827789344cc3aceb8e1d697"
  pkg.url "https://cache.ruby-lang.org/pub/ruby/2.1/ruby-#{pkg.get_version}.tar.gz"

  if platform.is_windows?
    pkg.add_source "http://buildsources.delivery.puppetlabs.net/windows/elevate/elevate.exe", sum: "bd81807a5c13da32dd2a7157f66fa55d"
    pkg.add_source "file://resources/files/windows/elevate.exe.config", sum: "a5aecf3f7335fa1250a0f691d754d561"
    pkg.add_source "file://resources/files/ruby_219/windows_ruby_gem_wrapper.bat"
  end

  base = 'resources/patches/ruby_219'
  pkg.apply_patch "#{base}/libyaml_cve-2014-9130.patch"

  special_flags = " --prefix=#{settings[:prefix]} --with-opt-dir=#{settings[:prefix]} "

  if platform.is_windows?
    pkg.apply_patch "#{base}/windows_ruby_2.1_update_to_rubygems_2.4.5.patch"
    pkg.apply_patch "#{base}/windows_fixup_generated_batch_files.patch"
    pkg.apply_patch "#{base}/windows_remove_DL_deprecated_warning.patch"
    pkg.apply_patch "#{base}/windows_ruby_2.1_update_to_rubygems_2.4.5.1.patch"
    pkg.apply_patch "#{base}/update_rbinstall_for_windows.patch"
  end

  pkg.build_requires "openssl"

  if platform.is_deb?
    pkg.build_requires "zlib1g-dev"
  elsif platform.is_rpm?
    pkg.build_requires "zlib-devel"
  elsif platform.is_windows?
    pkg.build_requires "pl-zlib-#{platform.architecture}"
  end

  if platform.is_macos?
    pkg.environment "optflags" => settings[:cflags]
  end

  if platform.is_windows?
    pkg.build_requires "pl-gdbm-#{platform.architecture}"
    pkg.build_requires "pl-iconv-#{platform.architecture}"
    pkg.build_requires "pl-libffi-#{platform.architecture}"
    pkg.build_requires "pl-pdcurses-#{platform.architecture}"

    pkg.environment "PATH" => "$$(cygpath -u #{settings[:gcc_bindir]}):$$(cygpath -u #{settings[:tools_root]}/bin):$$(cygpath -u #{settings[:tools_root]}/include):$$(cygpath -u #{settings[:bindir]}):$$(cygpath -u #{settings[:ruby_bindir]}):$$(cygpath -u #{settings[:includedir]}):$$PATH"
    pkg.environment "CYGWIN" => settings[:cygwin]
    pkg.environment "optflags" => settings[:cflags] + " -O3"
    pkg.environment "LDFLAGS" => settings[:ldflags]

    special_flags = " CPPFLAGS='-DFD_SETSIZE=2048' debugflags=-g --prefix=#{settings[:ruby_dir]} --with-opt-dir=#{settings[:prefix]} "
  end


  # Here we set --enable-bundled-libyaml to ensure that the libyaml included in
  # ruby is used, even if the build system has a copy of libyaml available
  pkg.configure do
    [
      "bash configure \
        --enable-shared \
        --enable-bundled-libyaml \
        --disable-install-doc \
        --disable-install-rdoc \
        #{settings[:host]} \
        #{special_flags}"
     ]
  end

  pkg.build do
    "#{platform[:make]} -j$(shell expr $(shell #{platform[:num_cores]}) + 1)"
  end

  # Because the autogenerated batch wrappers for ruby built from source are
  # not consistent with legacy builds, we removed the addition of the batch
  # wrappers from the build of ruby and instead we will just put them in
  # ourselves. note that we can use the same source file for all batch wrappers
  # because the batch wrappers use the wrappers file name to find the source
  # to execute (i.e. irb.bat will look to execute "irb" due to it's filename)
  if platform.is_windows?
    pkg.install do
      ["cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/irb.bat",
       "cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/gem.bat",
       "cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/rake.bat",
       "cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/erb.bat",
       "cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/rdoc.bat",
       "cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/ri.bat",]
    end
  end

  pkg.install do
    "#{platform[:make]} -j$(shell expr $(shell #{platform[:num_cores]}) + 1) install"
  end

  if platform.is_windows?
    pkg.install_file "../elevate.exe", "#{settings[:windows_tools]}/elevate.exe"
    pkg.install_file "../elevate.exe.config", "#{settings[:windows_tools]}/elevate.exe.config"
    lib_type = platform.architecture == "x64" ? "seh" : "sjlj"

    # As things stand right now, ssl should build under [INSTALLDIR]\Puppet\puppet on
    # windows. However, if things need to run *outside* of the normal batch file runs
    # (puppet.bat ,mco.bat etcc) the location of openssl away from where ruby is
    # installed will cause a failure. Specifically this is meant to help services like
    # mco that require openssl but don't have access to environment.bat. Refer to
    # https://tickets.puppetlabs.com/browse/RE-7593 for details on why this causes
    # failures and why these copies fix that.
    #                   -Sean P. McDonald 07/01/2016
    pkg.install do
      [
        "cp #{settings[:prefix]}/bin/libgcc_s_#{lib_type}-1.dll #{settings[:ruby_bindir]}",
        "cp #{settings[:prefix]}/bin/ssleay32.dll #{settings[:ruby_bindir]}",
        "cp #{settings[:prefix]}/bin/libeay32.dll #{settings[:ruby_bindir]}",
      ]
    end
    pkg.directory settings[:ruby_dir]
  end
end
