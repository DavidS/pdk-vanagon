component "ruby-2.1.9" do |pkg, settings, platform|
  pkg.version "2.1.9"
  pkg.md5sum "d9d2109d3827789344cc3aceb8e1d697"
  pkg.url "https://cache.ruby-lang.org/pub/ruby/2.1/ruby-#{pkg.get_version}.tar.gz"

  base = 'resources/patches/ruby_219'
  pkg.apply_patch "#{base}/libyaml_cve-2014-9130.patch"

  special_flags = " --prefix=#{settings[:ruby_dir]} --with-opt-dir=#{settings[:prefix]} "

  if platform.is_windows?
    pkg.apply_patch "#{base}/windows_ruby_2.1_update_to_rubygems_2.4.5.patch"
    pkg.apply_patch "#{base}/windows_fixup_generated_batch_files.patch"
    pkg.apply_patch "#{base}/windows_remove_DL_deprecated_warning.patch"
    pkg.apply_patch "#{base}/windows_ruby_2.1_update_to_rubygems_2.4.5.1.patch"
    pkg.apply_patch "#{base}/update_rbinstall_for_windows.patch"

    pkg.add_source "file://resources/files/ruby_219/windows_ruby_gem_wrapper.bat"
    pkg.add_source "file://resources/files/ruby_219/rbconfig/rbconfig-#{settings[:platform_triple]}.rb"

    rbconfig_info = {
      'x86_64-w64-mingw32' => {
        :sum => "fe5656cd5fcba0a63b18857275e03808",
        :target_double => 'x64-mingw32',
      },
    }
  end

  pkg.build_requires "openssl"

  if platform.is_deb?
    pkg.build_requires "zlib1g-dev"
  elsif platform.is_rpm?
    pkg.build_requires "zlib-devel"
  elsif platform.is_windows?
    pkg.build_requires "pl-zlib-#{platform.architecture}"
  end

  if platform.is_macos?
    pkg.environment "optflags", settings[:cflags]
  end

  if platform.is_windows?
    pkg.build_requires "pl-gdbm-#{platform.architecture}"
    pkg.build_requires "pl-iconv-#{platform.architecture}"
    pkg.build_requires "pl-libffi-#{platform.architecture}"
    pkg.build_requires "pl-pdcurses-#{platform.architecture}"

    pkg.environment "PATH", [
      "$(shell cygpath -u #{settings[:gcc_bindir]})",
      "$(shell cygpath -u #{settings[:tools_root]}/bin)",
      "$(shell cygpath -u #{settings[:tools_root]}/include)",
      "$(shell cygpath -u #{settings[:bindir]})",
      "$(shell cygpath -u #{settings[:ruby_bindir]})",
      "$(shell cygpath -u #{settings[:includedir]})",
      "$(PATH)",
    ].join(':')

    pkg.environment "CYGWIN", settings[:cygwin]
    pkg.environment "optflags", settings[:cflags] + " -O3"
    pkg.environment "LDFLAGS", settings[:ldflags]

    special_flags << " CPPFLAGS='-DFD_SETSIZE=2048' debugflags=-g "
  end


  # Here we set --enable-bundled-libyaml to ensure that the libyaml included in
  # ruby is used, even if the build system has a copy of libyaml available
  pkg.configure do
    [
      "bash configure \
        --enable-shared \
        --enable-bundled-libyaml \
        --disable-install-doc \
        --disable-install-rdoc \
        #{settings[:host]} \
        #{special_flags}"
     ]
  end

  pkg.build do
    "#{platform[:make]} -j$(shell expr $(shell #{platform[:num_cores]}) + 1)"
  end

  # Because the autogenerated batch wrappers for ruby built from source are
  # not consistent with legacy builds, we removed the addition of the batch
  # wrappers from the build of ruby and instead we will just put them in
  # ourselves. note that we can use the same source file for all batch wrappers
  # because the batch wrappers use the wrappers file name to find the source
  # to execute (i.e. irb.bat will look to execute "irb" due to it's filename)
  if platform.is_windows?
    pkg.install do
      ["cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/irb.bat",
       "cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/gem.bat",
       "cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/rake.bat",
       "cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/erb.bat",
       "cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/rdoc.bat",
       "cp ../windows_ruby_gem_wrapper.bat #{settings[:ruby_bindir]}/ri.bat",]
    end
  end

  pkg.install do
    "#{platform[:make]} -j$(shell expr $(shell #{platform[:num_cores]}) + 1) install"
  end

  if platform.is_windows?
    lib_type = platform.architecture == "x64" ? "seh" : "sjlj"

    # As things stand right now, ssl should build under [INSTALLDIR]\Puppet\puppet on
    # windows. However, if things need to run *outside* of the normal batch file runs
    # (puppet.bat ,mco.bat etcc) the location of openssl away from where ruby is
    # installed will cause a failure. Specifically this is meant to help services like
    # mco that require openssl but don't have access to environment.bat. Refer to
    # https://tickets.puppetlabs.com/browse/RE-7593 for details on why this causes
    # failures and why these copies fix that.
    #                   -Sean P. McDonald 07/01/2016
    pkg.install do
      [
        "cp #{settings[:prefix]}/bin/libgcc_s_#{lib_type}-1.dll #{settings[:ruby_bindir]}",
        "cp #{settings[:prefix]}/bin/ssleay32.dll #{settings[:ruby_bindir]}",
        "cp #{settings[:prefix]}/bin/libeay32.dll #{settings[:ruby_bindir]}",
      ]
    end

    # Here we replace the rbconfig from our ruby compiled with our toolchain
    # with an rbconfig from a ruby of the same version compiled with the system
    # gcc. Without this, the rbconfig will be looking for a gcc that won't
    # exist on a user system and will also pass flags which may not work on
    # that system.
    # We also disable a safety check in the rbconfig to prevent it from being
    # loaded from a different ruby, because we're going to do that later to
    # install compiled gems.
    target_dir = File.join(settings[:ruby_dir], "lib", "ruby", "2.1.0", rbconfig_info[settings[:platform_triple]][:target_double])

    pkg.install do
      [
        "sed -i 's|raise|warn|g' #{target_dir}/rbconfig.rb",
        "mkdir -p #{settings[:datadir]}/doc",
        "cp #{target_dir}/rbconfig.rb #{settings[:datadir]}/doc",
        "cp ../rbconfig-#{settings[:platform_triple]}.rb #{target_dir}/rbconfig.rb",
      ]
    end

    pkg.directory settings[:ruby_dir]
    pkg.directory settings[:ruby_bindir]
  end
end
